观察者模式：
    定义了对象之间的一对多依赖，这样一来，当一个对象改变状态的时候，它的所有依赖者都会收到通知并自动更新。

原则：交互对象之间应该保持松耦合

结构：
    1. 分为“主题（Subject）”和“订阅者（Observer）”；
    2. Subject需要有如下功能：注册订阅者、退订订阅者、通知订阅者；
    3. Observer需要有如下功能：接收更新（让主题调用），以及一个主题实例引用（用于取消订阅）；
    4. 观察者模式应该是 主题 与 观察者 之间是松耦合的，只要遵循接口，那么即使改变主题、观察者任意一方都不会影响另一方。
    5. jdk自带了观察者接口：Observable与Observer，但存在如下问题：
        主题接口Observable是一个类，java单继承机制导致限制了复用潜力；
        主题接口Observable将关键方法setChanged()保护起来（Observable发送通知前需要保证调用了setChanged()来改变标志位），导致无法使用组合来设计主题；

模式：
    推送：主题一旦变化会主动推送消息给订阅者；
    拉取：订阅者会自行调用主题的getter方法获取状态；

    1. 推模型是假定主题对象知道观察者需要的数据；而拉模型是主题对象不知道观察者具体需要什么数据，没有办法的情况下，干脆把自身传递给观察者，让观察者自己去按需要取值。
    2. 推模型可能会使得观察者对象难以复用，因为观察者的update()方法是按需要定义的参数，可能无法兼顾没有考虑到的使用情况。这就意味着出现新情况的时候，
       就可能提供新的update()方法，或者是干脆重新实现观察者；而拉模型就不会造成这样的情况，因为拉模型下，update()方法的参数是主题对象本身，
       这基本上是主题对象能传递的最大数据集合了，基本上可以适应各种情况的需要。